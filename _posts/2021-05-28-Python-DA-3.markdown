---
layout: post
title:  "플레이 스토어 리뷰 크롤링 - 3"
date:   2021-05-28 21:45:00 +0900
image:  python_da_1_frontimg.PNG
tags:   플레이스토어 크롤링 파이썬 셀레니움
---

### 2개월만의 업데이트

분명 2번째 게시물에서 앱 링크를 하나씩 불러와 여는 기능을 올린다 했는데...그로부터 2개월이 지났다.

물론 2개월이란 시간동안 아무런 진전이 없었던 것은 아니지만 그 진전을 공유할 여유가 없었음을 양해 부탁드린다.

일단 직전 포스트의 내용을 이어 설명하자면, 파일로 저장한 각 앱 링크를 하나씩 여는 코드를 만들었다. 이후 개별 앱 링크를 받아 웹페이지를 열고 크롤링을 진행하는 함수, 그리고 크롤링 함수에서 만들어진 데이터를 엑셀로 저장하는 함수, 마지막으로 위 핵심 함수들을 하나로 묶어 실행시키는 함수까지 완성하였다.

***

![]({{site.baseurl}}/images/python_da_3_img1.PNG)
*앱 링크 txt파일을 불러와 링크를 순차적으로 여는 함수*

![]({{site.baseurl}}/images/python_da_img1.PNG)
*실질적 크롤링을 하는 함수, 앱 이름, 개발사 이름 등 기본적인 정보부터 전체 리뷰를 보는 기능까지 구현되어있다.*

![]({{site.baseurl}}/images/python_da_img1.PNG)
*위 크롤링 함수의 데이터를 받아 엑셀에 저장하는 함수*

![]({{site.baseurl}}/images/python_da_img6.PNG)
*크롤링에 필요한 모든 함수를 총집합시킨 함수*

참고로 위 사진의 코드들은 2개월동안 이런저런 수정이 이루어진 코드들이다.

***

위 코드를 작성 및 실행하며 느낀점은 크게 4가지이다.

1. 크롤링 자체는 컴퓨터 자원을 크게 소모하지 않는다.
  - 셀레니움 사용으로 멀티프로세싱 사용이 불가능해 유의미한 차이를 얻을 수 없었다. 만약 셀레니움에 멀티프로세싱 기능을 사용할 수 있는 방법을 아신다면 꼭 연락 부탁드린다.
2. 데이터를 순차적으로 정리 및 재구성 하는 것에는 큰 시간이 걸린다.
3. 웹페이지를 실제로 띄우는 것보다 셀레니움의 headless 옵션을 사용하는 것이 훨씬 컴퓨터 자원을 적게 사용한다.
4. 각 단계별로 print를 사용해 시간을 나타내는 것이 이후 디버깅에 큰 도움이 된다.

먼저, 본인의 컴퓨터는 그리 고사양이 아니다. 

현재 i5-6500, 16GB RAM, GTX 1060 3GB로 구성된 시스템을 사용중인데, 크롤링을 하는 과정에서 작업관리자상의 성늠탭에서 평소와 큰 차이를 보여주지 않았고 동시에 전체적인 성능저하가 없었기에 크롤링 자체는 컴퓨터 자원을 크게 소모하지 않는다고 결론내렸다.

하지만 크롤링된 데이터를 순차적으로 정리 및 재구성(짧은 리뷰, 긴 리뷰를 순서에 맞게 정리 하는 것)하는 작업과 여러 데이터를 하나로 묶는 작업은 큰 시간이 걸렸다. 일례로 케이크 라는 어플의 리뷰 약 19000개의 크롤링은 약 한시간이 걸렸지만, 엑셀에 데이터를 저장할때까지 9시간정도 걸렸다. 아무래도 작업이 순차적으로 이루어져서 그렇다고 생각된다.

크롤링과정에서 웹페이지가 제대로 보여지지 않아 리뷰 크롤링이 중간에 중단되고 다음 단계(데이터 저장 단계)로 넘어가는 경우가 많았다. 이는 한 웹페이지에 끊임없는 스크롤 다운이 지속되고 표시할 요소가 많아짐에 따라 느려짐이 발생해 일어나는 일이라 생각되었고 이를 해결하기 위해 Webdriver에 headless옵션을 적용하였다. 이후 이전과 동일한 문제는 크게 발생하지 않았다.

마지막으로 한 작업에서 다른 작업으로 넘어갈때 print에 datetime을 이용해 시간을 표기하는 것이 디버깅에 큰 도움이 되었다. 이 경우 어느 부분이 느린지, 어느 부분에서 오류가 발생했는지 등 많은 정보를 유추 할 수 있게 해주었고 완벽히 해결된 부분이 아니라면 꼬리표를 달듯 에러 트래킹이 가능하도록 해주었다. 아주 유용한 부분이었다.


